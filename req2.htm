<!doctype html>
<title>Requirements check Room</title>
<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <!-- Loading  nodeGame libraries and CSS -->
  <script src="/socket.io/socket.io.js"></script> 
  <script src="/javascripts/nodegame-full.js" charset="utf-8"></script>
  <link rel='stylesheet' href='/stylesheets/fullheight.css'></link>
  <link rel='stylesheet' href='/stylesheets/noscript.css'></link>
  <script src="/ultimatum/js/requirements.js" charset="utf-8"></script>
  <!-- end -->
</head>

<body>
  <h2 id="h2title">Welcome!</h2>
  <noscript>
    Your browser does not support JavaScript. You cannot take this HIT, if you don't have JavaScript enabled in your browser.
  </noscript>
  <script>

    window.onload = function () {

      // Player ID from Mturk
      var mtid, game;

      mtid = JSUS.getQueryString('id');
      game = new Requirements();

      // Configuring nodegame.
      node.setup('nodegame', {
	  // HOST needs to be specified only 
	  // if this file is located in another server
	  // host: http://myserver.com,	  
	  window: {
	      promptOnleave: false,
              noEscape: true // Defaults TRUE
	  },
	  env: {
	      auto: false,
              mtid: mtid
	  },
	  events: {
	      dumpEvents: false, // output to console all fired events
              history: false // keep a record of all fired events
	  },
	  socket: {
	      type: 'SocketIo', // for remote connections
	      reconnect: false
	  },
          game_metadata: game.metadata,
          plot: game.plot,
          verbosity: 10
      });

     // node.connect("/requirements");
    
var J = JSUS;
                div = W.getElementById('widgets_div');
    div = document.body;
            token = J.getQueryString('id');


                // Requirements Box.
            window.req = node.widgets.append('Requirements', div, {
                // Automatically sends a SAY message with the outcome of the
                // tests, and the navigator.userAgent property.
                sayResults: true,
                // Mixin the properties of the object returned by the callback
                // with the default content of the SAY message. It can also
                // overwrite the defaults.
                addToResults: function() {
                    return { token: token };
                }
            });
            
            req.onFail = function() {
                var str, args;
                console.log('failed');
                str = '%spanYou are NOT allowed to take the HIT. If you ' +
                    'have already taken it, you must return it. You can ' +
                    'leave a feedback using the form below.%span';
                args = {
                    '%span': {
                        'class': 'requirements-fail'
                    }
                };
                W.sprintf(str, args, div);
                window.feedback = node.widgets.append('Feedback', div);
            };

            req.onSuccess = function() {
                var str, args;
                node.emit('HIDE', 'unsupported');
                str = '%spanYou are allowed to take the HIT.%span';
                args = {
                    '%span': {
                        'class': 'requirements-success'
                    }
                };
                W.sprintf(str, args, div);
                node.store.cookie('token', token);
            };

            // Synchronous callback function for the Requirements widget.
            // Returns an array containing a string for every error.
            // Empty array on success.
            function cookieSupport() {
                var errors = [];
                if ('undefined' === typeof node.store.cookie) {
                    errors.push('Cookie support must be enabled.');
                }
                return errors;
            }

            // Asynchronous callback function for the Requirements widget.
            // When the token has been validated on the server, it calls
            // the _result_ callback with the results of the validation
            // to be displayed on screen.
            function checkToken(result) {
               
                node.get('MTID', function(authorized) {
                    var msg;
                    if (authorized.success) {
                        // No errors.
                        result([]);
                    }
                    else {
                        msg = 'Token authorization failed: ' + authorized.msg;
                        result([msg]);
                    }
                }, 'SERVER', token);
            }

            // Add all the requirements functions.
            req.addRequirements(
                // Tests nodeGame dependencies.
                req.nodeGameRequirements,
                // loadFrameTest will temporarily change the main frame
                // reference. Trying to access DOM elements during the test
                // might cause errors.
                // req.loadFrameTest,
                cookieSupport
                // checkToken
            );

            req.checkRequirements();
	


    };  
  </script>
</body>
